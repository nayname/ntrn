[
	{
		"NeutronInterchainQueries": "The Neutron Interchain Queries Example Contract demonstrates how to use Neutron's Interchain Queries (ICQ) Module within a CosmWasm smart contract. It serves as a reference implementation that shows developers how to register, update, and remove interchain queries to other chains, enabling smart contracts to fetch and react to off-chain or cross-chain data asynchronously. By using the Interchain Queries SDK, the contract interacts with the ICQ module to handle data like account balances or IBC channel states from remote chains. This example is particularly valuable for developers building cross-chain dApps on the Neutron platform, as it highlights the correct patterns for lifecycle management of queries and processing of callback responses."
	},
	{
		"NeutronInterchainTransactions": "The **Neutron Interchain Transactions Example Contract** illustrates how to interact with Neutron's **Interchain Transactions (ICTX) Module** using the **Interchain Transactions SDK** within a **CosmWasm smart contract**. It provides a working example of how contracts can initiate and manage interchain messages—such as token transfers or contract calls—on remote blockchains via IBC. The contract demonstrates the full lifecycle of an interchain transaction, including message composition, submission through the ICTX module, and handling acknowledgments or failures via callbacks. This is essential for developers building **cross-chain logic or automation**, as it showcases how to securely and reliably trigger remote actions from within a smart contract on Neutron."
	},
	{
		"NeutronIBCTransfer": "The Neutron IBC Transfer Example Contract showcases how to correctly handle IBC token transfers within a CosmWasm smart contract on Neutron, using the Neutron Sudo package. This example focuses on managing callbacks triggered after an IBC transfer is completed, allowing the contract to react to success or failure events. By leveraging Neutron’s sudo mechanism—a privileged callback hook—it demonstrates how to safely process acknowledgments and update contract state accordingly. This contract is a practical reference for developers who need to build automated or reactive cross-chain token transfer logic within their decentralized applications."
	},
	{
		"NeutronDexModuleGrpc": "The **Neutron DEX Module + gRPC Example Contract** demonstrates how to use the **Neutron SDK's gRPC package** to interact with the **Neutron DEX module** directly from a **CosmWasm smart contract**. It showcases how to perform on-chain queries to the DEX module—such as fetching pool data or swap information—by leveraging gRPC-based communication rather than standard query messages. This example is particularly useful for developers building **advanced DeFi applications** on Neutron, as it illustrates how to access rich, structured DEX data efficiently using gRPC within smart contracts."
	},
	{
		"Reflect": "The **Reflect Contract** in the Neutron repository is a simple utility contract primarily used for **testing purposes** within the broader Neutron framework. It allows for the **execution and reflection of arbitrary messages**, meaning it can receive, store, and resend messages—making it ideal for verifying message passing, callbacks, and contract interactions in test environments. This contract helps ensure that **Neutron modules and SDK components** behave correctly when integrated with CosmWasm smart contracts."
	}
]